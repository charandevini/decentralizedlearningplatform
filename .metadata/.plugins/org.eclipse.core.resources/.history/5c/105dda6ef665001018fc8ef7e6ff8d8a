package com.dlp.courseengineservice.service.impl;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.dlp.courseengineservice.dto.CourseRequest;
import com.dlp.courseengineservice.dto.CourseResponse;
import com.dlp.courseengineservice.dto.EnrollmentRequest;
import com.dlp.courseengineservice.feign.client.ProgressClient;
import com.dlp.courseengineservice.model.Course;
import com.dlp.courseengineservice.model.User;
import com.dlp.courseengineservice.repository.CourseRepository;
import com.dlp.courseengineservice.repository.UserRepository;
import com.dlp.courseengineservice.service.CourseService;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class CourseServiceImpl implements CourseService {

	private final CourseRepository courseRepository;
	private final UserRepository userRepository;
	private final ProgressClient progressClient;

	@Override
	public CourseResponse createCourse(CourseRequest request) {

		User instructor = userRepository.findById(request.getInstructorId())
				.orElseThrow(() -> new RuntimeException("Instructor not found with id: " + request.getInstructorId()));

		Course course = Course.builder().instructorId(instructor.getUserId())
				.instructorName(request.getInstructorName()).title(request.getTitle())
				.description(request.getDescription()).createdBy(request.getCreatedBy()).build();

		Course savedCourse = courseRepository.save(course);

		return CourseResponse.fromEntity(courseRepository.save(course));
	}

	private List<User> checkUserExits(String roleName) {
		return userRepository.findByRole(roleName);
	}

	private List<EnrollmentRequest> createEnrollmentsForLearners(List<User> learners, Long courseId) {
		return learners.stream().map((User user) -> EnrollmentRequest.builder().userId(user.getUserId())
				.courseId(courseId).progressPercent(0).build()).collect(Collectors.toList());
	}

	@Override
	public List<CourseResponse> getAllCourses() {
		return courseRepository.findAll().stream().map(CourseResponse::fromEntity).toList();
	}

	@Override
	public CourseResponse getCourseById(Long courseId) {
		return courseRepository.findById(courseId).map(CourseResponse::fromEntity)
				.orElseThrow(() -> new RuntimeException("Course not found"));
	}

}
